type Nat;
val Zero: Nat = ???;
val Succ = (n: Nat) => Nat;

type Bool;
val True: Bool = ???;
val False: Bool = ???;
val If = (A: Type) => (cond: Bool) => (succ: A) => (alt: A) => A;

type List;
val ListCons = (A: Type) => (N: Nat) => List;
val Nil = (A: Type) => ListCons(A, Zero);
val Cons = (A: Type) => (N: Nat) => (head: A) => (tail: ListCons(A, N)) => ListCons(A, Succ(N));

val Eq = (A: Type) => (lhs: A) => (rhs: A) => Type;
val Refl = (A: Type) => (X: A) => Eq(A, X, X);

val EqV = (A: Type) => (lhs: A) => (rhs: A) => (p: (x: A) => Type) => (pa: p(lhs)) => p(rhs);
val ReflV = (A: Type) => (X: A) => EqV(A, X, X);
